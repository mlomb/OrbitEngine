#shadertype VERTEX
cbuffer PVMatrices : register(b0)
{
    float4x4 pr_matrix;
    float4x4 vw_matrix;
};

struct Input {
	float2 position : POSITION;
};

struct Output {
	float4 position : SV_POSITION;
	float3 fragPos : TEXCOORD;
};

Output main(Input input) {
	Output output;
	
    float3x4 view_no_translation = (float3x4)vw_matrix;
    
	float4x4 inversed = transpose(mul(pr_matrix, (float4x4)view_no_translation));

	output.position = float4(input.position, 0.0, 1.0);
	output.fragPos = normalize(mul(inversed, output.position).xyz);
	//fragPos.y *= -1; // Flip
	
	return output;
}



#shadertype FRAGMENT
struct Input {
	float4 position : SV_POSITION;
	float3 uv : TEXCOORD;
};

/*
cbuffer SkyboxUniforms : register(b2)
{
    float lod; // 1.5
    float exposure; // 1
};
*/

TextureCube cubeMap;
SamplerState cubemapSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

float4 main(Input input) : SV_TARGET {
	float lod = 1.5;
	float exposure = 1.0;

    float3 color = cubeMap.SampleLevel(cubemapSampler, input.uv, lod).rgb;
	color = float3(1.0, 1.0, 1.0) - exp(-color * exposure);
    
	return float4(color, 1);
}