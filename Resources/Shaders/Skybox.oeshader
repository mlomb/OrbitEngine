#shadertype VERTEX
cbuffer PVMatrices : register(b0)
{
    float4x4 pr_matrix;
    float4x4 vw_matrix; // inversed TODO
};

struct Input {
	float2 position : POSITION;
	float2 uv : TEXCOORD;
};

struct Output {
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD;
	float3 eyeDir : TEXCOORD1;
};

Output main(Input input) {
	Output output;

	output.position = float4(input.position, 1.0, 1.0);
	output.uv = input.uv;
	output.eyeDir = normalize(mul(vw_matrix, output.position).xyz);
	output.eyeDir.y *= -1; // Flip
	
	return output;
}



#shadertype FRAGMENT
struct Input {
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD;
	float3 eyeDir : TEXCOORD1;
};

/*
cbuffer SkyboxUniforms : register(b2)
{
    float lod; // 1.5
    float exposure; // 1
};
*/

TextureCube cubeMap : register(t0);

SamplerState cubemapSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

float4 main(Input input) : SV_TARGET {
	float lod = 1.5;
	float exposure = 1.0;

    float3 color = cubeMap.SampleLevel(cubemapSampler, input.eyeDir, lod).rgb;
	color = float3(1.0, 1.0, 1.0) - exp(-color * exposure);

	return float4(color, 1);
}