#shadertype VERTEX
struct Input {
	float2 position : POSITION;
	float2 uv : TEXCOORD;
};

struct Output {
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD;
};

Output main(Input input) {
	Output output;

	output.position = float4(input.position, 0, 1);
	output.uv = input.uv;

	return output;
}

#shadertype FRAGMENT
#include Variables.oeshader

struct Input {
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD;
};

Texture2D GPosition : register(t0);
Texture2D GNormalRoughness : register(t1);
Texture2D GAlbedoMetallic : register(t2);

SamplerState samplerType : register(s0);

#include Lighting.oeshader

float4 main(Input input) : SV_TARGET {
	float3 fragPos = GPosition.Sample(samplerType, input.uv).rgb;
	
	SurfaceOutput surf;
	surf.normal = GNormalRoughness.Sample(samplerType, input.uv).rgb;
	surf.albedo = GAlbedoMetallic.Sample(samplerType, input.uv).rgb;
	surf.roughness = GNormalRoughness.Sample(samplerType, input.uv).a;
	surf.metallic = GAlbedoMetallic.Sample(samplerType, input.uv).a;
	
	float3 color = ComputeLighting(surf, fragPos);

	return float4(color, 1.0);
}