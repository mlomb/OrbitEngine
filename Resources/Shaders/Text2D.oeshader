#shadertype VERTEX
cbuffer PVMatrix : register(b0)
{
	matrix pv_matrix;
};

struct Input {
	float2 position : POSITION;
	float4 color : COLOR1;
	float4 borderColor : COLOR2;
	float2 uv : TEXCOORD;
	float texid : TEXID;
	float mode : TEXID2;
	float border : TEXID3;
};

struct Output {
	float4 position : SV_POSITION;
	float4 color : COLOR1;
	float4 borderColor : COLOR2;
	float2 uv : TEXCOORD;
	float texid : TEXID;
	float mode : TEXID2;
	float border : TEXID3;
};

Output main(Input input) {
	Output output;

    output.position = mul(pv_matrix, float4(input.position.x, input.position.y, 0, 1));
	output.color = input.color;
	output.borderColor = input.borderColor;
	output.uv = input.uv;
	output.texid = input.texid;
	output.mode = input.mode;
	output.border = input.border;

	return output;
}

#shadertype FRAGMENT
#include TextureArray.oeshader

struct Input {
	float4 position : SV_POSITION;
	float4 color : COLOR1;
	float4 borderColor : COLOR2;
	float2 uv : TEXCOORD;
	float texid : TEXID;
	float mode : TEXID2;
	float border : TEXID3;
};

float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}
float sigDist(float3 msdf, float mode) {
    if(mode == 3.0)
        return median(msdf.r, msdf.g, msdf.b);
    return msdf.r;
}
float outline(float width, float distance, float aaf) {
	return 1.0 - smoothstep(width - aaf, width + aaf, distance);
}
float4 layer(float4 foreground, float4 background) {
    return foreground * foreground.a + background * (1.0 - foreground.a);
}

float4 main(Input input) : SV_TARGET{
    float4 sampled = resolveTexture2DArr(input.texid, input.uv);
	float4 color = input.color;

    if(input.mode == 0.0 || input.mode == 4.0) {
        color *= sampled;
    } else { // some kind of SDF
        float distance = 1.0 - sigDist(sampled.rgb, input.mode);
		float aaf = fwidth(distance) * 0.5;
		
		color = layer(
			float4(input.color.rgb, outline(0.5, distance, aaf) * input.color.a),
			float4(input.borderColor.rgb, outline(0.5 + input.border * 0.5, distance, aaf) * input.borderColor.a)
		);
    }
    
	return color;
}
